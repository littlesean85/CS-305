CS 305 Module Two Written Assignment Template

Instructions
Replace the bracketed text with the relevant information in your own words. If you choose to include images or supporting materials, make certain to insert them in all the relevant locations in the document.

1.	Areas of Security

In the first level of the Vulnerability Assessment Process Flow (VAPF), that I consider be the biggest areas that we would need to consider are the following: Input Validation, APIs, Cryptography, Client/Server, Code Error, and Encapsulation. 

2.	Areas of Security Justification

Let’s start with Input Validation, which looks for secure input and representations.  This is an area of security because with the command input function, we want to make sure we are being strict on all the input functions. This will hep prevent any injection attacks by promoting a secure system.   Next, we are looking at the APIs, where we secure the API interactions.  This would be used if we are going to allow accessibility to the app from outside of the system.  RESTful API would be a good use of this, and since we would be using it for outside access, we would need to ensure it is secure, and it isn’t allowing unwanted access.  This brings us to the next point of Cryptography. Since we are using the API for outside access, we want to make sure things are encrypted.  These things being customer and client data.  The encryption would be key to keep it protected as it travels through everything. Client/Server is the next part we will have to ensure that data is safe in the transfer.  With the Code Error, we want to make sure that we are handling any errors securely.  Encapsulation is making sure we secure the data structures.  Meaning we need to ensure we are securing the input functions to access the areas where data is stored in the systems.  We need to ensure it doesn’t allow for things to mess up the structure as data is being passed. 

3.	Code Review Summary

With the code we are looking at, from the application to the greeting and the greeting controller, the version being used we would want to make sure it is up to date to ensure we are looking at all the proper.  When also looking through the game controller portion of the code there are a few lines where we are leaving it vulnerable for an attack of someone setting a string that can cause problems down the line. From the data being taken in via the parser, and then it is added to the template as plain text.  They could like stated before use this to change the strings and attack the programs from within. 

4.	Mitigation Plan

For versions we would look at the versions and make sure we have it updated to the current software so everything with security is functioning properly.  Then for the Game controller parser input we would need to look a little bit more in depth to find some good solutions for it.  An easy solution would be to make a size limit for the response or the string to limit what attackers could put into it.  This would prevent larger amounts of data being passed through the program, which could be used as an attack.  We could also program something that would look for any problematic strings as the program runs through the parser. 
